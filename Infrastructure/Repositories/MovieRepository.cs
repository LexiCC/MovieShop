using ApplicationCore.Contracts.Repositories;
using ApplicationCore.Entities;
using Infrastructure.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Repositories
{
    public class MovieRepository : Repository<Movie>, IMovieRepository
    {
        public MovieRepository(MovieShopDbContext dbContext) : base(dbContext)
        {
        }

        public async Task< IEnumerable<Movie>> Get30HighestGrossingMovies()
        {
            // LINQ query 
            // SELECT top 30 * from Movie order by revenue 
            // Always check the SQL Query generated by EF, to make sure its the one you want and properly optimized
            var movies = await _dbContext.Movies.OrderByDescending(m => m.Revenue).Take(30).ToListAsync();
            return movies;
        }

        public async Task<IEnumerable<Movie>> Get30HighestRatedMovies()
        {
            throw new NotImplementedException();
        }

        public override async Task<Movie> GetById(int id)
        {
            // Include method to include the navigation properties, join table from Genre and Trailers tables
            // Join 3 table here: Movie table, MovieGenre table, Genre table
            var movie = _dbContext.Movies.Include(m=> m.GenresOfMovie).ThenInclude(mg=> mg.Genre)
                .Include(m=>m.CastOfMovie).ThenInclude(mc => mc.Cast)
                .Include(m=> m.Trailers)
                .Include(m => m.Reviews)
                .FirstOrDefaultAsync(m=> m.Id == id);
           
            // if (movie != null) {
            //     movie.Rating = movie.Reviews.Any()?Math.Round(movie.Reviews.Average(r => r.Rating),2):null;
            //     return await movie;
            // } else {
            //     return null;
            // }
            // use review dbset (table) to get average rating of the movie and assign it to movie.Rating
            
            return await movie;
        }

    }
}
